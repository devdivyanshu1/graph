#include <bits/stdc++.h>

using namespace std;

class Disjoint {
    vector<int> par;
    vector<int> rank;

public:
    Disjoint(int n) {
        par.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            par[i] = i;  // Each element is its own parent initially
        }
    }

    // Find with path compression
    int ulp(int a) {
        if (par[a] == a) return a;
        return par[a] = ulp(par[a]);  // Path compression
    }

    // Union by rank
    void makedis(int u, int v) {
        int utu = ulp(u);  // Find ultimate parent of u
        int utv = ulp(v);  // Find ultimate parent of v
        
        if (utu == utv) return;  // Already in the same set

        if (rank[utu] > rank[utv]) {
            par[utv] = utu;
        } else if (rank[utu] < rank[utv]) {
            par[utu] = utv;
        } else {
            par[utv] = utu;
            rank[utu]++;
        }
    }
};
