public:
    void dfs(int node, vector<int>& vis, stack<int>& st, vector<vector<int>>& adj) {
        vis[node] = 1;
        for (auto it : adj[node]) {
            if (!vis[it]) {
                dfs(it, vis, st, adj);
            }
        }
        st.push(node);
    }

    void dfs1(int node, vector<int>& vis, vector<vector<int>>& adj) {
        vis[node] = 1;
        for (auto it : adj[node]) {
            if (!vis[it]) {
                dfs1(it, vis, adj);
            }
        }
    }

    int kosaraju(int V, vector<vector<int>>& adj) {
        vector<int> vis(V, 0);
        stack<int> st;
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, vis, st, adj);
            }
        }

        vector<vector<int>> adjTranspose(V);
        for (int i = 0; i < V; i++) {
            for (auto it : adj[i]) {
                adjTranspose[it].push_back(i);
            }
        }

        fill(vis.begin(), vis.end(), 0);
        int sccCount = 0;
        while (!st.empty()) {
            int node = st.top();
            st.pop();
            if (!vis[node]) {
                dfs1(node, vis, adjTranspose);
                sccCount++;
            }
        }

        return sccCount;
    }


};
